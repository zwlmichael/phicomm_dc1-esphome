# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Run a one-line script
      run: echo Hello, world!

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        echo Add other actions to build,
        echo test, and deploy your project.
esphome:
  name: $device_name
  platform: ESP8266
  board: esp01_1m
  #断电记忆，恢复上次的状态
  esp8266_restore_from_flash: yes
#----------------------------------------------------
  #指定编译临时文件存放位置
  build_path: build/$device_name
#----------------------------------------------------

#------- 一些自定义的配置，一般情况下只需要改这下面的内容 -------

substitutions:
  config_version: 'v2019.12.26.001'
  #设备名称（多个dc1改成不一样的，API接入和ESPHOME容器会识别这个作为名称显示）
  device_name: phicomm_dc1_mqtt
  #MQTT设备名称（多个dc1改成不一样的，MQTT接入及控制会识别这个）
  mqtt_device_name: ChilerenRoom
  #               这里之所以会取2个设备名称独立开来，
  #               是为了便于通过MQTT接入服务端（如ioBroker）后的设备分类和集中

  #如果SSID是隐藏的，设置为true
  wifi_fast_connect: 'false'
  #WiFi离线多久后重启设备，秒s/分钟min/小时h，不需要此功能设置为0s，建议设置0s，防止异常重启，或者设置的大一些
  wifi_reboot_timeout: 0s
  #电量统计的数据刷新时间（内部刷新时间，非上报周期），秒s/分钟min/小时h
  cse7766_update_interval: 1s

  #与MQTT服务端失去连接多久后重启设备，秒s/分钟min/小时h，不需要此功能设置为0s，建议设置0s，防止异常重启，或者设置的大一些
  mqtt_reboot_timeout: 0s
  #保持MQTT socket存活时间
  mqtt_keepalive: 15s
  #电量上报时间，固定时间内上报一次（心跳包）
  cse7766_heartbeat: 120s
  
  #Home Assistant自动发现
  # https://www.home-assistant.io/docs/mqtt/discovery/
  #MQTT消息前缀
  mqtt_topic_prefix: 'homeassistant/phicomm_dc1/${mqtt_device_name}'
  #Home Assistant自动发现，true开启，false关闭
  mqtt_discovery: 'true'
  #Home Assistant重启时自动发现消息保持
  mqtt_discovery_retain: 'false'
  #Home Assistant发现设备后使用的前缀
  mqtt_discovery_prefix: 'phicomm_dc1'
  #available
  available: "${mqtt_topic_prefix}/available"
  switch0: "${mqtt_topic_prefix}/switch/switch0"
  switch1: "${mqtt_topic_prefix}/switch/switch1"
  switch2: "${mqtt_topic_prefix}/switch/switch2"
  switch3: "${mqtt_topic_prefix}/switch/switch3"
  logo_light: "${mqtt_topic_prefix}/switch/logo_light"
  switch0_state: "${switch0}/state"
  switch1_state: "${switch1}/state"
  switch2_state: "${switch2}/state"
  switch3_state: "${switch3}/state"
  logo_light_state: "${logo_light}/state"
  config_version_state: "${mqtt_topic_prefix}/sensor/config_version/state"
  connected_ssid_state: "${mqtt_topic_prefix}/sensor/connected_ssid/state"
  current_state: "${mqtt_topic_prefix}/sensor/current/state"
  esphome_version_state: "${mqtt_topic_prefix}/sensor/esphome_version/state"
  ip_address_state: "${mqtt_topic_prefix}/sensor/ip_address/state"
  power_state: "${mqtt_topic_prefix}/sensor/power/state"
  uptime_state: "${mqtt_topic_prefix}/sensor/uptime/state"
  voltage_state: "${mqtt_topic_prefix}/sensor/voltage/state"
  wifi_signal_state: "${mqtt_topic_prefix}/sensor/wifi_signal/state"


#------- WIFI配置 -------
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#----------需要设置静态地址的改下面的配置------------
#  manual_ip:
#    static_ip: 192.168.178.230
#    gateway: 192.168.178.1
#    subnet: 255.255.255.0
#    dns1: 1.1.1.1
#    dns2: 1.2.2.1
#--------------------------------------------------
  domain: .local
  reboot_timeout: $wifi_reboot_timeout
  power_save_mode: none
  fast_connect: $wifi_fast_connect
  #需要修改名字的时候，启用，OTA后禁用
  #use_address: ota.local
  
#------- WIFI AP配置 -------
  ap:
    ssid: $device_name
    password: "1234567890"
#对应的管理IP地址为192.168.4.1
captive_portal:

#------- MQTT配置，注意此配置与API配置互斥，只能选择1个 -------
mqtt:
  id: mqtt_client
  broker: !secret mqtt_broker
  port: !secret mqtt_port
  username: !secret mqtt_username
  password: !secret mqtt_password
  client_id: $device_name
  topic_prefix: $mqtt_topic_prefix
  log_topic:
    topic: "${device_name}/logs"
    level: debug

#------- OTA 空中升级配置 -------
ota:
  safe_mode: true
  password: !secret ota_password
#  port: 3286

#------- WEB后台，不建议使用 -------
#web_server:
#  port: 80
#  css_url: https://esphome.io/_static/webserver-v1.min.css
#  js_url: https://esphome.io/_static/webserver-v1.min.js
#----------------------------------------------------

#------- 深度休眠配置，一般情况下不建议使用，休眠后将无法远程控制设置 -------
#deep_sleep:
  #唤醒时间
#  run_duration: 50s
  #休眠时间
#  sleep_duration: 10min
#----------------------------------------------------

#------- 接入CAT9554 IO扩展芯片 -------
i2c:
  sda: GPIO3
  scl: GPIO12
  scan: false
  #frequency: 20kHz

#------- 接入CAT9554的扩展IO -------
cat9554:
  id: cat9554_hub
  #address: 0x20
  irq_pin: GPIO4

#------- 接入CSE7766电量传感器 -------
uart:
  rx_pin: GPIO13
  baud_rate: 4800

#------- 是否开启DEBUG模式，logger的level需至少设置为DEBUG -------
debug:

#-------打印log设置，注意实际输出端口为主板上面的log_tx，而不是刷机用到的tx-------
logger:
  #不同的log等级看到的信息详细程度不一样，信息量从少到多依次为
  # NONE、ERROR、WARN、INFO、DEBUG、VERBOSE、VERY_VERBOSE
  level: INFO
  #设置为0关闭通过UART的log输出
  baud_rate: 0
  #通过TTL看log信息，取消注释下面这行，读取接口为RX1，具体见模组接口说明图
#  hardware_uart: UART1


#------- 传感器配置 -------
sensor:
  #电量统计
  - platform: cse7766
    voltage:
      name: "${device_name} voltage"
      state_topic: $voltage_state
      filters:
        - or:
          - heartbeat: $cse7766_heartbeat
            #同上面条件，数据波动大于下面设置的值将会上报一次
          - delta: 3.0
    current:
      name: "${device_name} current"
      state_topic: $current_state
      filters:
        - or:
          - heartbeat: $cse7766_heartbeat
            #同上面条件，数据波动大于下面设置的值将会上报一次
          - delta: 1.0
    power:
      name: "${device_name} power"
      state_topic: $power_state
      filters:
        - or:
          - heartbeat: $cse7766_heartbeat
            #同上面条件，数据波动大于下面设置的值将会上报一次
          - delta: 5.0
    update_interval: $cse7766_update_interval
  #通电工作时间
  - platform: uptime
    name: "${device_name} uptime"
    state_topic: $uptime_state
  #WiFi信号
  - platform: wifi_signal
    name: "${device_name} wifi_signal"
    state_topic: $wifi_signal_state

binary_sensor:
  - platform: status #设备状态
    name: "${device_name} status"
    internal: false #是否对外隐藏（true/false）
    availability:
      topic: "${mqtt_topic_prefix}/available"
      payload_available: online
      payload_not_available: offline
  - platform: gpio
    #第一个按钮(内部引用，对外隐藏)
    name: "${device_name} key1"
    internal: true
    pin:
      cat9554: cat9554_hub
      # Use pin number 0
      number: 0
      mode: INPUT
    filters:
      - invert:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - switch.toggle: switch1
  - platform: gpio
    #第二个按钮(内部引用，对外隐藏)
    name: "${device_name} key2"
    internal: true
    pin:
      cat9554: cat9554_hub
      # Use pin number 1
      number: 1
      mode: INPUT
    filters:
      - invert:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - switch.toggle: switch2
  - platform: gpio
    #第三个按钮(内部引用，对外隐藏)
    name: "${device_name} key3"
    internal: true
    pin:
      cat9554: cat9554_hub
      # Use pin number 2
      number: 2
      mode: INPUT
    filters:
      - invert:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - switch.toggle: switch3
  - platform: gpio
    #总开关(内部引用，对外隐藏)
    name: "${device_name} key0"
    id: key0
    internal: true
    pin:
      number: GPIO16
      mode: INPUT_PULLDOWN_16
    filters:
      - invert:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - switch.toggle: switch0

#影子开关，作用是控制总开关时候的状态记忆
  - platform: template
    #开关1
    name: "shadow1"
    id: shadow1
    internal: true
  - platform: template
    #开关2
    name: "shadow2"
    id: shadow2
    internal: true
  - platform: template
    #开关3
    name: "shadow3"
    id: shadow3
    internal: true
    
#------- 状态灯 -------
status_led:
  pin: GPIO0

text_sensor:
  - platform: template #配置文件版本
    name: "${device_name} Config Version"
    state_topic: $config_version_state
    lambda: |-
      return {"${config_version}"};
  - platform: version #esphome版本
    name: "${device_name} Esphome Version"
    state_topic: $esphome_version_state
    icon: mdi:information-outline
  - platform: wifi_info #wifi信息
    ip_address:
      name: "${device_name} IP Address"
      state_topic: $ip_address_state
    ssid:
      name: "${device_name} Connected SSID"
      state_topic: $connected_ssid_state
#    bssid:
#      name: "${device_name} Connected BSSID"

#------- 用于控制继电器 -------
output:
  - platform: gpio
    #继电器3(内部引用，对外隐藏)
    id: realy3
    #设置启动优先级到IO级，解决断电恢复被重置的问题
    setup_priority: 900
    pin:
      cat9554: cat9554_hub
      # Use pin number 4
      number: 4
      mode: OUTPUT
      inverted: false
  - platform: gpio
    #继电器2(内部引用，对外隐藏)
    id: realy2
    setup_priority: 900
    pin:
      cat9554: cat9554_hub
      # Use pin number 5
      number: 5
      mode: OUTPUT
      inverted: false
  - platform: gpio
    #继电器1(内部引用，对外隐藏)
    id: realy1
    setup_priority: 900
    pin:
      cat9554: cat9554_hub
      # Use pin number 6
      number: 6
      mode: OUTPUT
      inverted: false
  - platform: gpio
    #总继电器(内部引用，对外隐藏)
    id: realy0
    setup_priority: 900
    pin:
      cat9554: cat9554_hub
      # Use pin number 7
      number: 7
      mode: OUTPUT
      inverted: false

#------- 用于可控制的开关 -------
switch:
  - platform: output
    #总开关(显示为一个开关)
    name: "${device_name} switch0"
    output: realy0
    id: switch0
    state_topic: $switch0_state
    command_topic: "${switch0}/set"
    on_turn_on:
      - switch.turn_on: LOGO_light
      - lambda: |-
          if (id(shadow1).state) {
            id(switch1).turn_on();
            id(shadow1).publish_state(false);
          }else {
            id(mqtt_client).publish("${switch1_state}", "OFF");
          }
          if (id(shadow2).state) {
            id(switch2).turn_on();
            id(shadow2).publish_state(false);
          } else {
            id(mqtt_client).publish("${switch2_state}", "OFF");
          }
          if (id(shadow3).state) {
            id(switch3).turn_on();
            id(shadow3).publish_state(false);
          } else {
            id(mqtt_client).publish("${switch3_state}", "OFF");
          }
    on_turn_off:
      - switch.turn_off: LOGO_light
      - lambda: |-
          if (id(switch1).state) {
            id(switch1).turn_off();
            id(shadow1).publish_state(true);
          } else {
            id(mqtt_client).publish("${switch1_state}", "OFF");
          }
          if (id(switch2).state) {
            id(switch2).turn_off();
            id(shadow2).publish_state(true);
          } else {
            id(mqtt_client).publish("${switch2_state}", "OFF");
          }
          if (id(switch3).state) {
            id(switch3).turn_off();
            id(shadow3).publish_state(true);
          } else {
            id(mqtt_client).publish("${switch3_state}", "OFF");
          }
  - platform: output
    #开关1(显示为一个开关)
    name: "${device_name} switch1"
    output: realy1
    id: switch1
    state_topic: $switch1_state
    command_topic: "${switch1}/set"
    on_turn_on:
      - lambda: |-
          if (!id(switch0).state) {
            id(switch0).turn_on();
          }
  - platform: output
    #开关2(显示为一个开关)
    name: "${device_name} switch2"
    output: realy2
    id: switch2
    state_topic: $switch2_state
    command_topic: "${switch2}/set"
    on_turn_on:
      - lambda: |-
          if (!id(switch0).state) {
            id(switch0).turn_on();
          }
  - platform: output
    #开关3(显示为一个开关)
    name: "${device_name} switch3"
    output: realy3
    id: switch3
    state_topic: $switch3_state
    command_topic: "${switch3}/set"
    on_turn_on:
      - lambda: |-
          if (!id(switch0).state) {
            id(switch0).turn_on();
          }
  - platform: gpio
    #LOGO灯
    pin: GPIO14
    name: "${device_name} LOGO Light"
    id: LOGO_light
    state_topic: $logo_light_state
    command_topic: "${logo_light}/set"
    internal: false
    inverted: true #翻转
